name: ci-cd pipeline workflow-5

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/workflows"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Configuration
        run: echo "Setting up configuration"

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup node version
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{runner.os}}-node-${{hashFiles('package-lock.json')}}
          restore-keys: |
            ${{runner.os}}-node
      
      - name: Install Dependencies
        run: npm install

      - name: Run linting
        run: npm run lint

  setup-notify:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Setup Success notification
        run: |
          if [ -d "node_modules" ]; then
            echo "Dependencies installed"
          else
            echo "Dependencies missing"
          fi




  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setting Up Node Version
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Catch npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{runner.os}}-node-${{hashFiles('package-lock.json')}}
          restore-keys: |
            ${{runner.os}}-node

      - name: Installing Dependencies
        run: npm install

      - name: Test script run
        run: |
         npm test
         echo "Test completed"





  build:
      runs-on: ubuntu-latest
      needs: test
      steps:
        - name: Checkout repo
          uses: actions/checkout@v4

        - name: Setup node version
          uses: actions/setup-node@v4
          with:
            node-version: "20"

        - name: Cache npm dependencies
          uses: actions/cache@v4
          with:
            path: ~/.npm
            key: ${{runner.os}}-node-${{hashFiles('package-lock.json')}}
            restore-keys: |
              ${{runner.os}}-node

        - name: Install Dependencies
          run: npm install

        - name: Make Build
          run: npm run build

        - name: Upload Build Folder
          uses: actions/upload-artifact@v4
          with:
            name: dist
            path: ./dist

        - name: Upload Conformation
          run: echo "Upload build completed"

  build-notify:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Success notification
        run: |
          if [ -d "dist" ]; then
            echo "Build completed successfully"
          else
            echo "Build failed: 'dist' folder not found"
          fi







  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Node -v setup
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{runner.os}}-node-${{hashFiles('package-lock.json')}}
          restore-keys:
            ${{runner.os}}-node

      - name: Install dependencies
        run: npm install

      - name: Download build folder
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: .dist

      - name: Install netlify cli
        run: npm install -g netlify-cli

      - name: Deploy to netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
          NETLIFY_SITE_ID: ${{secrets.NETLIFY_SITE_ID}}
        run: |
             netlify deploy --dir=./dist --site=$NETLIFY_SITE_ID --prod

      - name: Deployment done
        run: echo "âœ… Deployment to Netlify completed!"

  notify:
    name: Slack
    needs: [build-notify] # We only check after the others jobs have run
    if: always() # Always runs even if one of the builds fails
    runs-on: ubuntu-latest
    steps:
      - uses: iRoachie/slack-github-actions@v2.3.2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  email-notify:
      runs-on: ubuntu-latest
      steps:
          - uses: danthe1st/email-filechange-notif-action@v1
            with:
              # Address to send E-Mails from
              senderEmail: ${{ secrets.SENDER_EMAIL }}
              # optional, The subject of the E-Mails to send
              subjectLine: 'GitHub file change notification'
              # A file in the repository or HTTP address that contains file patterns with E-Mail addresses that should be notified on file changes
              mailingList: ${{ secrets.MAILING_LIST }}
              # The SMTP server used to send E-Mails
              smtpServer: ${{ secrets.SMTP_SERVER }}
              # optional, The SMTP port used to send E-Mails
              smtpPort: 587
              # The SMTP user name used to send E-Mails
              smtpUsername: ${{ secrets.SMTP_USER }}
              # The SMTP password used to send E-Mails
              smtpPassword: ${{ secrets.SMTP_PASSWORD }}

